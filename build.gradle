buildscript {
    repositories {
    	mavenLocal()
        jcenter()
        mavenCentral()

        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.12.0"
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.12.1"
}

apply plugin: 'docker-compose'
apply plugin: DockerServicesPlugin
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublishDockerImages"
apply plugin: 'maven'

allprojects {
    group = "io.eventuate.cdc"
}
/*
 * 指定所使用的仓库
 */
repositories {
    // Gradle没有自己的中央仓库
    // 先从本地maven仓库寻找依赖的jar包，存在则直接使用本地maven仓库的jar
    mavenLocal()
    mavenCentral()
    jcenter()
    eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
}

projects {
    license {
        header rootProject.file('src/license/HEADER')
    }
}

subprojects {
    apply plugin: 'maven'
	apply plugin: 'java'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
    	mavenLocal()
        mavenCentral()
        jcenter()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    dependencies {
        testCompile "junit:junit:4.12"
    }
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: deployUrl)
                pom.project {
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }
}

if (!project.ext.has("database")) {
    project.ext.set("database", System.env.DATABASE == null || System.env.DATABASE == "" ? "mysql" : "$System.env.DATABASE")
}

if (!project.ext.has("mode")) {
    project.ext.set("mode", System.env.MODE == null || System.env.MODE == "" ? "binlog" : "$System.env.MODE")
}

if (mode == "unified") {
    project.ext.set("databaseDockerFile", "docker-compose-unified.yml")
    project.ext.set("databaseDockerCdcFile", "docker-compose-cdc-unified.yml")
} else {
    project.ext.set("databaseDockerFile", "docker-compose-${database}.yml")
    project.ext.set("databaseDockerCdcFile", "docker-compose-cdc-${database}-${mode}.yml")
}

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_ACTIVE_MQ_VERSION", eventuateActiveMQImageVersion
    environment.put "EVENTUATE_RABBIT_MQ_VERSION", eventuateRabbitMQImageVersion

    removeOrphans = true

    mysql {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
        removeContainers = project.ext.removeContainers
    }

    mysqlmigration {
        projectName = null
        removeContainers = project.ext.removeContainers
        useComposeFiles = ["docker-compose-eventuate-local-mysql-for-migration.yml"]
        startedServices = project.ext.composeStartedServices()
    }

    mariadb {
        projectName = null
        useComposeFiles = ["docker-compose-mariadb.yml"]
        removeContainers = project.ext.removeContainers
    }

    mssql {
        projectName = null
        useComposeFiles = ["docker-compose-mssql.yml"]
        removeContainers = project.ext.removeContainers
    }

    postgres {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
        removeContainers = project.ext.removeContainers
    }

    mysqljson {
        projectName = null
        useComposeFiles = ["docker-compose-mysql-json.yml"]
        removeContainers = project.ext.removeContainers
    }

    mariadbjson {
        projectName = null
        useComposeFiles = ["docker-compose-mariadb-json.yml"]
        removeContainers = project.ext.removeContainers
    }

    mssqljson {
        projectName = null
        useComposeFiles = ["docker-compose-mssql-json.yml"]
        removeContainers = project.ext.removeContainers
    }

    postgresjson {
        projectName = null
        useComposeFiles = ["docker-compose-postgres-json.yml"]
        removeContainers = project.ext.removeContainers
    }

    unified {
        projectName = null
        useComposeFiles = ["docker-compose-unified.yml", "docker-compose-cdc-unified.yml"]
        removeContainers = project.ext.removeContainers
    }

    publish {
        environment.put "DOCKER_IMAGE_TAG", dockerImageTag
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml", "docker-compose-cdc-mysql-binlog.yml"]
        removeContainers = project.ext.removeContainers
    }
}

task aggregatedTestReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  // Include the results from the 'test' task in all subprojects
  reportOn subprojects*.test
}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregates Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP
        dependsOn subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc

        source subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc.source
        destinationDir file("$buildDir/docs/javadoc")
        classpath = files(subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc.classpath)
    }
}
